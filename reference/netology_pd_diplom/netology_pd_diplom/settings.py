"""
Django settings for netology_pd_diplom project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=hs6$#5om031nujz4staql9mbuste=!dc^6)4opsjq!vvjxzj@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'baton',  # Django Baton
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_rest_passwordreset',
    'backend',
    'drf_spectacular',
    'social_django',
    'easy_thumbnails',
    'silk',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
]

BATON = {
    'SITE_HEADER': 'My Project Admin',
    'SITE_TITLE': 'My Admin Site',
    'INDEX_TITLE': 'Dashboard',
    'POWERED_BY': 'Django Baton',
    'ENABLE_API': True,  # Включаем API для Baton
}

ROOT_URLCONF = 'netology_pd_diplom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'netology_pd_diplom.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Папка для всех статических файлов

AUTH_USER_MODEL = 'backend.User'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS = True

env = environ.Env()
environ.Env.read_env()  # Чтение .env файла

EMAIL_HOST = 'smtp.mail.ru'

EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_PORT = env.int('EMAIL_PORT', default=465)
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=True)
SERVER_EMAIL = EMAIL_HOST_USER

# Настройки брокера сообщений для Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # For Redis
# Результаты выполнения задач
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

EASY_THUMBNAILS_HIGH_RESOLUTION = True
EASY_THUMBNAILS_QUALITY = 85
EASY_THUMBNAILS_ALIASES = {
    'avatar_small': {'size': (100, 100), 'crop': True},
    'avatar_large': {'size': (500, 500), 'crop': True},
    'product_small': {'size': (200, 200), 'crop': True},
    'product_large': {'size': (600, 600), 'crop': True},
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 40,

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',  # Для неавторизованных пользователей
        'rest_framework.throttling.UserRateThrottle',  # Для авторизованных пользователей
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',  # Неавторизованные пользователи: 100 запросов в день
        'user': '1000/day',  # Авторизованные пользователи: 1000 запросов в день
        'login': '5/min',  # Максимум 5 попыток авторизации в минуту
    },
    'EXCEPTION_HANDLER': 'backend.exceptions.custom_throttle_exception_handler',

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'social_core.backends.vk.VKOAuth2',  # Для авторизации через ВКонтакте
    'social_core.backends.google.GoogleOAuth2',  # Для авторизации через Google
    'social_core.backends.yandex.YandexOAuth2',  # Для авторизации через Яндекс
    'social_core.backends.twitter.TwitterOAuth',  # Для авторизации через Twitter
    'django.contrib.auth.backends.ModelBackend',  # для обычной аутентификации
)

# VK
SOCIAL_AUTH_VK_OAUTH2_KEY = env('SOCIAL_AUTH_VK_OAUTH2_KEY')
SOCIAL_AUTH_VK_OAUTH2_SECRET = env('SOCIAL_AUTH_VK_OAUTH2_SECRET')

# Google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# Yandex
SOCIAL_AUTH_YANDEX_OAUTH2_KEY = env('SOCIAL_AUTH_YANDEX_OAUTH2_KEY')
SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = env('SOCIAL_AUTH_YANDEX_OAUTH2_SECRET')

# Twitter
SOCIAL_AUTH_TWITTER_KEY = env('SOCIAL_AUTH_TWITTER_KEY')
SOCIAL_AUTH_TWITTER_SECRET = env('SOCIAL_AUTH_TWITTER_SECRET')

# Параметры для редиректов после авторизации
LOGIN_REDIRECT_URL = '/'  # Страница, на которую будет происходить редирект после успешной авторизации
LOGIN_URL = 'user/login'  # URL для страницы входа

SPECTACULAR_SETTINGS = {
    'TITLE': 'backend_API',
    'DESCRIPTION': 'Описание API для моего приложения',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,  # Определяет, включать ли схему в Swagger UI
}

# Инициализация Sentry
sentry_sdk.init(
    dsn=env('SENTRY_DSN'),
    integrations=[DjangoIntegration()],
    traces_sample_rate=1.0,  # Можно использовать 1.0 для записи всех ошибок или уменьшить для производственного режима
    send_default_pii=True,  # Отправлять ли личную информацию
)

# Настройка кеша для Redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # используем Redis на локальной машине, 1-й базой данных
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
    }
}

# Настройка Cacheops
CACHEOPS_REDIS = {
    'host': '127.0.0.1',  # Адрес Redis
    'port': 6379,         # Порт Redis
    'db': 1,              # Используем базу данных с номером 1
    'socket_timeout': 3,
}

CACHEOPS = {
    # 'backend.*': {'ops': 'all', 'timeout': 60 * 15},  # Кэширование всех запросов
    'backend.product': {'ops': 'all', 'timeout': 60 * 15},  # Кэшируем все запросы к модели Product на 15 минут
    'backend.category': {'ops': 'all', 'timeout': 60 * 60},  # Кэшируем запросы к Category на 1 час
    'backend.shop': {'ops': 'all', 'timeout': 60 * 30},  # Кэшируем запросы к Shop на 30 минут
    'backend.productparameter': {'ops': 'all', 'timeout': 60 * 10},  # Кэшируем запросы к параметрам товаров на 10 минут
    'backend.contact': {'ops': 'all', 'timeout': 60 * 60 * 24},  # Кэшируем контакты на сутки
}

# Использование кеша для сессий
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'cacheops': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
}
